import { Composer } from "telegraf";
import { UsersModel } from "../../db/user.schema";
import {
  nextWeekText,
  todayText,
  previousWeekText,
  manualDateBtnEntry,
  changeQueryBtnText,
  allWeekBtnText,
  mainMenu,
} from "../text";
import { CustomContext } from "../custom-context";

const composer = new Composer<CustomContext>();

composer.action("–ü–Ω", (ctx) => {
  ctx.session.day = "–ü–Ω";
  oneReaction(ctx);
});

composer.action("–í—Ç", (ctx) => {
  ctx.session.day = "–í—Ç";
  oneReaction(ctx);
});

composer.action("–°—Ä", (ctx) => {
  ctx.session.day = "–°—Ä";
  oneReaction(ctx);
});

composer.action("–ß—Ç", (ctx) => {
  ctx.session.day = "–ß—Ç";
  oneReaction(ctx);
});

composer.action("–ü—Ç", (ctx) => {
  ctx.session.day = "–ü—Ç";
  oneReaction(ctx);
});

composer.action("–°–±", (ctx) => {
  ctx.session.day = "–°–±";
  oneReaction(ctx);
});

composer.action("–ù–¥", (ctx) => {
  ctx.session.day = "–ù–¥";
  oneReaction(ctx);
});

composer.action(previousWeekText, (ctx) => {
  oneReaction(ctx);
});

composer.action(nextWeekText, (ctx) => {
  oneReaction(ctx);
});

composer.action(todayText, (ctx) => {
  oneReaction(ctx);
});

composer.action(mainMenu, (ctx) => {
  try {
    ctx.answerCbQuery().catch(() => {});
    ctx.scene.enter("welcomeScene");
  } catch (e) {}
});

composer.action(changeQueryBtnText, (ctx) => {
  oneReaction(ctx);
});

composer.action(manualDateBtnEntry, (ctx) => {
  oneReaction(ctx);
});

composer.action(allWeekBtnText, (ctx) => {
  oneReaction(ctx);
});
composer.action("üìå", (ctx) => {
  oneReaction(ctx);
});

function oneReaction(ctx: CustomContext) {
  try {
    ctx.session.time = 0;
    UsersModel.findById(ctx.from?.id)
      .then((result) => {
        ctx.answerCbQuery().catch(() => {});

        ctx.session.oneMessageId = Number(
          ctx.callbackQuery?.message?.message_id
        );
        ctx.session.default_value = result?.default_value;
        ctx.session.default_role = result?.default_role;
        ctx.session.default_mode = true;
        ctx.session.weekShift = 0;

        if (!ctx.session.default_value || !ctx.session.default_role)
          return ctx.scene.enter("defaultValueScene");

        ctx.scene.enter("scheduleScene");
      })
      .catch((err) => {
        ctx.reply(
          "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–ø—Ä–æ–±—É–π —â–µ(/start) —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—è –ø–æ –¥–æ–ø–æ–º–æ–≥—É –¥–æ —Ç–≤–æ—Ä—Ü—è –±–æ—Ç–∞"
        );
        console.log(err);
      });
  } catch (error) {}
}

export default composer;
